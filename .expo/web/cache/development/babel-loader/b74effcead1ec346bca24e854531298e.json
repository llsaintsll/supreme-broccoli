{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  _createClass(CardStack, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref3 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref3.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref4) {\n      var route = _ref4.route,\n          height = _ref4.height;\n\n      _this.setState(function (_ref5) {\n        var headerHeights = _ref5.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref6) {\n      var route = _ref6.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref7 = focusedOptions.safeAreaInsets || {},\n          _ref7$top = _ref7.top,\n          top = _ref7$top === void 0 ? insets.top : _ref7$top,\n          _ref7$right = _ref7.right,\n          right = _ref7$right === void 0 ? insets.right : _ref7$right,\n          _ref7$bottom = _ref7.bottom,\n          bottom = _ref7$bottom === void 0 ? insets.bottom : _ref7$bottom,\n          _ref7$left = _ref7.left,\n          left = _ref7$left === void 0 ? insets.left : _ref7$left;\n\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n            detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (shouldUseActivityState || Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n\n        var _ref8 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref8.safeAreaInsets,\n            _ref8$headerShown = _ref8.headerShown,\n            headerShown = _ref8$headerShown === void 0 ? true : _ref8$headerShown,\n            headerTransparent = _ref8.headerTransparent,\n            cardShadowEnabled = _ref8.cardShadowEnabled,\n            cardOverlayEnabled = _ref8.cardOverlayEnabled,\n            cardOverlay = _ref8.cardOverlay,\n            cardStyle = _ref8.cardStyle,\n            animationEnabled = _ref8.animationEnabled,\n            gestureResponseDistance = _ref8.gestureResponseDistance,\n            gestureVelocityImpact = _ref8.gestureVelocityImpact,\n            _ref8$gestureDirectio = _ref8.gestureDirection,\n            gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n            _ref8$transitionSpec = _ref8.transitionSpec,\n            transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n            _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n            cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n            _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n            headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref9 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref9.animationEnabled,\n                _ref9$gestureDirectio = _ref9.gestureDirection,\n                _gestureDirection = _ref9$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref9$gestureDirectio,\n                _ref9$transitionSpec = _ref9.transitionSpec,\n                _transitionSpec = _ref9$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref9$transitionSpec,\n                _ref9$cardStyleInterp = _ref9.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref9$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref9$cardStyleInterp,\n                _ref9$headerStyleInte = _ref9.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref9$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref9$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref10 = safeAreaInsets || {},\n            _ref10$top = _ref10.top,\n            safeAreaInsetTop = _ref10$top === void 0 ? insets.top : _ref10$top,\n            _ref10$right = _ref10.right,\n            safeAreaInsetRight = _ref10$right === void 0 ? insets.right : _ref10$right,\n            _ref10$bottom = _ref10.bottom,\n            safeAreaInsetBottom = _ref10$bottom === void 0 ? insets.bottom : _ref10$bottom,\n            _ref10$left = _ref10.left,\n            safeAreaInsetLeft = _ref10$left === void 0 ? insets.left : _ref10$left;\n\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","_defineProperty","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","Dimensions","get","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","enabled","container","onLayout","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","closing","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}