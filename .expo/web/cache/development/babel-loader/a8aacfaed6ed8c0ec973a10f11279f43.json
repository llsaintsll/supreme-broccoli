{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n      _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n      legacy = _checkLegacyPathConfi2[0],\n      compatOptions = _checkLegacyPathConfi2[1];\n\n  var initialRoutes = [];\n\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens)\n    });\n  }\n\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n\n      return {\n        name: name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n\n    return bWildcardIndex - aWildcardIndex;\n  });\n\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n\n    return _extends(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var result;\n  var current;\n\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n        _routes = _matchAgainstConfigs.routes,\n        remainingPath = _matchAgainstConfigs.remainingPath;\n\n    if (_routes !== undefined) {\n      current = createNestedStateObject(_routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n          _routes2 = _matchAgainstConfigs2.routes,\n          _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n      remaining = _remainingPath;\n\n      if (_routes2 === undefined) {\n        var segments = remaining.split('/');\n        _routes2 = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      var state = createNestedStateObject(_routes2, initialRoutes);\n\n      if (current) {\n        var _current2;\n\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return result;\n}\n\nvar joinPaths = function joinPaths() {\n  var _ref2;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n\n    var match = remainingPath.match(config.regex);\n\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return _extends(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n\n    var _config$pattern;\n\n    var _ret = _loop(config);\n\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  var config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens)\n        });\n      }\n\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\n\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n    }\n  }\n\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\n\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var initialRoute = findInitialRoute(route.name, initialRoutes);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    var nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n    }\n  }\n\n  return state;\n};\n\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n\n  var current = state;\n\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"mappings":"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","names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","match","find","c","screen","_configs$find","parse","result","current","matchAgainstConfigs","regex","RegExp","source","remainingPath","segments","shift","state","_current","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","_config$pattern","_config$path","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","_current3","parseConfig","query"],"sources":["getStateFromPath.tsx"],"sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens),\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}